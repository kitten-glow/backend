version: '3.7'

services:
  reverse-proxy:
    image: traefik:v2.8
    networks:
      - backend
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.tlsresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.tlsresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"

  api:
    build:
      context: api
      target: production
    restart: always
    hostname: api
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - ./api:/api
      - /api/node_modules
      - /api/dist
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${APP_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=web,websecure"
    depends_on:
      - redis
      - postgres

  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - redis_data:/data

  crdb:
    image: cockroachdb/cockroach:v23.1.10
    hostname: crdb
    networks:
      - backend
    command: start-single-node --insecure
    volumes:
      - crdb_data:/cockroach/cockroach-data

networks:
  backend:

volumes:
  crdb_data:
  redis_data:
